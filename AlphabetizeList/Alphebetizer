package athenaQuizGass;

import java.io.IOException;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Collections;

public class QuizImplementation {

	public static void main(String[] args) throws IOException {

		//Starts timing the program's execution time.
		long startTime = System.nanoTime();
		
		
		//Take string input from command line.
		String input = args[0];
		int length = input.length();
		

		//Turn 'input' into array of Integers (where Integer value is equal to the char's ASCII value) for easier alphabetization.
		ArrayList<Integer> word = new ArrayList<Integer>();
		ArrayList<Integer> sortedWord = new ArrayList<Integer>();
		int[] repeats = new int[26];
		for(int i = 0; i < length; i++){
			//Fills two arraylists with the word. Immediately below, we'll sort 'sortedWord.'
			//The 'repeats' array keeps track of what letters repeat, an important key for the multiset mathematics to work.
			word.add(new Integer(input.charAt(i)));
			sortedWord.add(new Integer(input.charAt(i)));
			repeats[input.charAt(i) - 65]++;
		}


		//Now we'll create a separate sorted array of those letters. This will be our reference to traverse the tree.
		Collections.sort(sortedWord);

		
		//Now we'll use this referenced array above to traverse the tree in a loop until we reach a terminal node.
		//This implementation isn't necessarily the fastest, but it's pretty easy to follow conceptually. It's also pretty compact.
		BigInteger choice = new BigInteger("0");
		BigInteger place = new BigInteger("1");
		BigInteger one = new BigInteger("1");
		//Due to the size of some computations, BigInteger is necessary over the primitive long data type. With
		//BigInteger, the input can be of any size and it should still compute accurately. The downside is a slight
		//performance and readability hit.
		for(int i = 0; i < length - 1; i++){
			BigInteger n = new BigInteger("0");
			while(!word.get(i).equals(sortedWord.get(n.intValue()))){
				n = n.add(one);
			}
			choice = n;
			//Choice tells us which bucket we've 'chosen' based on what the current letter's order is vs what it should be.
			//Info on multiset problems: https://en.wikipedia.org/wiki/Permutation#Permutations_of_multisets
			place = place.add(multiset(length - i - 1, repeats).multiply(choice));
			sortedWord.remove(n.intValue());
			repeats[word.get(i) - 65]--;
		}


		//Now to just print the output.
		System.out.println("The inputted word is " + place + " in the alphabetically sorted list of all words made of the same finite multiset of letters.");
		
		//Ends timer, prints out time.
		long endTime = System.nanoTime();
		long time = endTime - startTime;
		System.out.println("...and it ran in " + time / 1000000 + " milliseconds.");

	}

	//A simple function to compute factorial. Non-recursive.
	public static BigInteger factorial(int n){
		BigInteger fact = new BigInteger("1");
		for (Integer i = 1; i <= n; i++) {
			BigInteger iproxy = new BigInteger(i.toString());
			fact = fact.multiply(iproxy);
		}
		return fact;
	}
	
	//An also pretty simple function to compute the multiset permutation: 
	//https://en.wikipedia.org/wiki/Permutation#Permutations_of_multisets
	public static BigInteger multiset(int total, int[] repeats){
		BigInteger multiset = factorial(total);
		for(int i = 0; i < repeats.length; i++){
			multiset = multiset.divide(factorial(repeats[i]));
		}
		return multiset;
	}

}
